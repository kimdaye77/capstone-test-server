package com.naver.capstone.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.study1.model.User;
import com.example.study1.service.UserService;

/*
 * 전체적인 restful 구조는 Uniform interface에 대한 개념이 적용됨. 
 * 하나의 URL을 이용해서 여러 응답을 가져갈 수 있다는 뜻.
 * /users라는 url로 하나는 GET 하나는 POST로 요청을 보내고
 * 또 /users/{userid}라는 url로 GET, PUT, DELETE 메서드 요청을 보내고 있다. 
 */
@RestController
@RequestMapping("/users") // 루트 url을 /users 로 매핑
public class UserController {

	// Layered Architecture는 인접한 계층끼리만 통신이 가능하다. Controller랑 Service랑 통신을 위해 의존 관계를 설정해줘야 하는데
	// @Autowired를 통해 자동으로 설정이 가능해진다.
	// 코드들의 흐름을 보면 UserController에서는 요청을 받고 해당 요청을 UserSerivce로 전달해 최종 결과만을 리턴하고 있다.
	@Autowired
	private UserService userService;

	// 모든 유저 조회
	// uri : localhost:0000/users
	@GetMapping("")
	public List<User> getAllUsers() {
		return userService.getAllUsers();
	}

	// 유저 아이디 조회
	// uri : localhost:0000/users/{userid}
	@GetMapping("/{userid}")
	public User getUserByUserid(@PathVariable String userid) {
		return userService.getUserByUserId(userid);
	}

	// 유저 등록
	// uri : localhost:0000/users
	@PostMapping("")
	@ResponseBody
	public User registerUser(@RequestBody User user) {
		return userService.registerUser(user);
	}

	// 유저 수정
	// uri : localhost:0000/users/{userid}
	@PutMapping("/{userid}")
	public void modifyUser(@PathVariable String userid, @RequestBody User user) {
		userService.modifyUser(userid, user);
	}

	// 유저 삭제
	// uri : localhost:0000/users
	@DeleteMapping("/{userid}")
	public void removeUser(@PathVariable String userid) {
		userService.removeUser(userid);
	}
}
